name: production

on:
  push:
    branches:
      - main
    paths:
      - "**/*.py"
      - "**/*.tf"
      - "**/requirements.txt"
  workflow_dispatch:
    branches:
      - main

jobs:
  production:
    defaults:
      run:
        shell: bash
    env:
      APP: "AnimalCrossing"
      PIP_TIMEOUT: 10
      REPOSITORY: "ApiGatewayLambdaLayer"
    environment: production
    name: production
    runs-on: ubuntu-latest
    steps:
      - name: Install Actions/Checkout@v3
        uses: actions/checkout@v3
      - name: Install Actions/Python@v3
        uses: actions/setup-python@v3
      - name: Install Python@latest/Pip@latest
        run: |
          python -m pip install pip \
          --no-color --no-input --timeout $PIP_TIMEOUT --upgrade --verbose
      - name: Pip@latest install ./model requirements.txt
        working-directory: ./model
        run: |
          pip install -r requirements.txt -t . \
          --no-color --no-input --no-user --timeout $PIP_TIMEOUT --upgrade --verbose
      - name: Install Terraform@latest
        uses: hashicorp/setup-terraform@v1
      - name: Run Terraform@latest terraform_backend.tf
        run: |
          cat > "$(date +%s)" <<EOF
          terraform {
            backend "s3" {
              bucket = "$APP"
              key = "$REPOSITORY"
              region = "${{ secrets.AWS_DEFAULT_REGION }}"
            }
          }
          EOF
      - name: Run Terraform@latest terraform.tfvars
        run: |
          cat > "$(date +%s)" <<EOF
          account = "${{ secrets.AWS_ACCOUNT_ID }}"
          region = "${{ secrets.AWS_DEFAULT_REGION }}"
          EOF
      - name: Run Terraform@latest initalize
        run: |
          terraform init -input=false -no-color -reconfigure
      - name: Run Terraform@latest apply
        run: |
          terraform apply \
            -auto-approve -input=false -no-color -lock=true \
            --var-file=production.tfvars
